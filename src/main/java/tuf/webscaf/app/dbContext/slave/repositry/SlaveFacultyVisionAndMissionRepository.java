package tuf.webscaf.app.dbContext.slave.repositry;

import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import org.springframework.stereotype.Repository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import tuf.webscaf.app.dbContext.slave.entity.SlaveFacultyVisionAndMissionEntity;

import java.util.UUID;

@Repository
public interface SlaveFacultyVisionAndMissionRepository extends ReactiveCrudRepository<SlaveFacultyVisionAndMissionEntity, Long> {

    Mono<SlaveFacultyVisionAndMissionEntity> findByUuidAndDeletedAtIsNull(UUID uuid);

    Flux<SlaveFacultyVisionAndMissionEntity> findAllByNameContainingIgnoreCaseAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndDeletedAtIsNullOrVisionContainingIgnoreCaseAndDeletedAtIsNullOrMissionContainingIgnoreCaseAndDeletedAtIsNull(Pageable pageable, String name, String description, String vision, String mission);

    Mono<Long> countByNameContainingIgnoreCaseAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndDeletedAtIsNullOrVisionContainingIgnoreCaseAndDeletedAtIsNullOrMissionContainingIgnoreCaseAndDeletedAtIsNull(String name, String description, String vision, String mission);

    Flux<SlaveFacultyVisionAndMissionEntity> findAllByNameContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrVisionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrMissionContainingIgnoreCaseAndStatusAndDeletedAtIsNull(Pageable pageable, String name, Boolean status, String description, Boolean status2, String vision, Boolean status3, String mission, Boolean status4);

    Mono<Long> countByNameContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrVisionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrMissionContainingIgnoreCaseAndStatusAndDeletedAtIsNull(String name, Boolean status, String description, Boolean status2, String vision, Boolean status3, String mission, Boolean status4);
}
