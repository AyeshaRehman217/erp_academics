package tuf.webscaf.app.dbContext.slave.repositry;

import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import org.springframework.stereotype.Repository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import tuf.webscaf.app.dbContext.slave.entity.SlaveStudentSpouseFamilyDoctorEntity;

import java.util.UUID;

@Repository
public interface SlaveStudentSpouseFamilyDoctorRepository extends ReactiveCrudRepository<SlaveStudentSpouseFamilyDoctorEntity, Long> {
    Flux<SlaveStudentSpouseFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndDeletedAtIsNull(Pageable pageable, String name, String description, String clinicalAddress);

    Flux<SlaveStudentSpouseFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStatusAndDeletedAtIsNull(Pageable pageable, String name, Boolean status1, String description, Boolean status2, String clinicalAddress, Boolean status3);

    Flux<SlaveStudentSpouseFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndStudentSpouseUUIDAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentSpouseUUIDAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentSpouseUUIDAndDeletedAtIsNull(Pageable pageable, String name, UUID teacherSpouseUUID, String description, UUID teacherSpouseUUID2, String clinicalAddress, UUID teacherSpouseUUID3);

    Flux<SlaveStudentSpouseFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndStudentSpouseUUIDAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentSpouseUUIDAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentSpouseUUIDAndStatusAndDeletedAtIsNull(Pageable pageable, String name, UUID teacherSpouseUUID, Boolean status, String description, UUID teacherSpouseUUID2, Boolean status2, String clinicalAddress, UUID teacherSpouseUUID3, Boolean status3);

    Mono<Long> countByNameContainingIgnoreCaseAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndDeletedAtIsNull(String name, String description, String clinicalAddress);

    Mono<Long> countByNameContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStatusAndDeletedAtIsNull(String name, Boolean status1, String description, Boolean status2, String clinicalAddress, Boolean status3);

    Mono<Long> countByNameContainingIgnoreCaseAndStudentSpouseUUIDAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentSpouseUUIDAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentSpouseUUIDAndDeletedAtIsNull(String name, UUID teacherSpouseUUID, String description, UUID teacherSpouseUUID2, String clinicalAddress, UUID teacherSpouseUUID3);

    Mono<Long> countByNameContainingIgnoreCaseAndStudentSpouseUUIDAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentSpouseUUIDAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentSpouseUUIDAndStatusAndDeletedAtIsNull(String name, UUID teacherSpouseUUID, Boolean status, String description, UUID teacherSpouseUUID2, Boolean status2, String clinicalAddress, UUID teacherSpouseUUID3, Boolean status3);

    Mono<SlaveStudentSpouseFamilyDoctorEntity> findByIdAndDeletedAtIsNull(Long id);

    Mono<SlaveStudentSpouseFamilyDoctorEntity> findByUuidAndDeletedAtIsNull(UUID uuid);

}
