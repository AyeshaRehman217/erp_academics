package tuf.webscaf.app.dbContext.slave.repositry;

import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import org.springframework.stereotype.Repository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import tuf.webscaf.app.dbContext.slave.entity.SlaveStudentChildFamilyDoctorEntity;

import java.util.UUID;

@Repository
public interface SlaveStudentChildFamilyDoctorRepository extends ReactiveCrudRepository<SlaveStudentChildFamilyDoctorEntity, Long> {
    
    Mono<SlaveStudentChildFamilyDoctorEntity> findByIdAndDeletedAtIsNull(Long id);

    Mono<SlaveStudentChildFamilyDoctorEntity> findByUuidAndDeletedAtIsNull(UUID uuid);

    Mono<SlaveStudentChildFamilyDoctorEntity> findFirstByStudentChildUUIDAndDeletedAtIsNull(UUID studentChildUUID);

    Flux<SlaveStudentChildFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndDeletedAtIsNull(Pageable pageable, String name, String description, String clinicalAddress);

    Flux<SlaveStudentChildFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStatusAndDeletedAtIsNull(Pageable pageable, String name, Boolean status1, String description, Boolean status2, String clinicalAddress, Boolean status3);

    Flux<SlaveStudentChildFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndStudentChildUUIDAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentChildUUIDAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentChildUUIDAndDeletedAtIsNull(Pageable pageable, String name, UUID studentChildUUID, String description, UUID studentChildUUID2, String clinicalAddress, UUID studentChildUUID3);

    Flux<SlaveStudentChildFamilyDoctorEntity> findAllByNameContainingIgnoreCaseAndStudentChildUUIDAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentChildUUIDAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentChildUUIDAndStatusAndDeletedAtIsNull(Pageable pageable, String name, UUID studentChildUUID, Boolean status, String description, UUID studentChildUUID2, Boolean status2, String clinicalAddress, UUID studentChildUUID3, Boolean status3);

    Mono<Long> countByNameContainingIgnoreCaseAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndDeletedAtIsNull(String name, String description, String clinicalAddress);

    Mono<Long> countByNameContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStatusAndDeletedAtIsNull(String name, Boolean status1, String description, Boolean status2, String clinicalAddress, Boolean status3);

    Mono<Long> countByNameContainingIgnoreCaseAndStudentChildUUIDAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentChildUUIDAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentChildUUIDAndDeletedAtIsNull(String name, UUID studentChildUUID, String description, UUID studentChildUUID2, String clinicalAddress, UUID studentChildUUID3);

    Mono<Long> countByNameContainingIgnoreCaseAndStudentChildUUIDAndStatusAndDeletedAtIsNullOrDescriptionContainingIgnoreCaseAndStudentChildUUIDAndStatusAndDeletedAtIsNullOrClinicalAddressContainingIgnoreCaseAndStudentChildUUIDAndStatusAndDeletedAtIsNull(String name, UUID studentChildUUID, Boolean status, String description, UUID studentChildUUID2, Boolean status2, String clinicalAddress, UUID studentChildUUID3, Boolean status3);

}
